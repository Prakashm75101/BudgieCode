API is an interface that enables communication and data exchange between two separate software systems.

***************COLLECTION***************
It is a group of requests.
It is used for organizing the api test suite.


***************API ENDPOINT***************
API endpoint is a specific location within an API that accepts requests and sends back responses. 
The endpoint includes the url of the server and few other parameter.

***************PARAMS in POSTMAN***************
In params we will give key and value pairs.

***************PARAMETERISATION IN API***************
Instead of making changes to end point again and again we can do parameterisation to test api against different environments.



example:
{{url}}/users

STEPS:
Click on eye icon next to environment
Add Global variable
Click save

*********************************************PROTOCOLS IN API*********************************************
HTTP
REST Representational State Transfer uses http based protocol for interactions
SOAP Simple Object Access Protocol which is based on XML to exchange information between computres


*********************************************CALLS*********************************************
-->GET: It is used to request the data from the specified source.
-->POST: POST is used to send data to server for creation or updating the resources.
-->PUT: PUT replaces the current representation of the target resource with the request payload.
-->PATCH: PATCH is used to update part of the target resource
-->DELETE: DELETE removes the specified resource.
-->OPTIONS: OPTION is used to describe the communication option for the target resources.
-->HEAD: HEAD asks for response which is identical to GET requests, but without the response body.

***************Difference between PUT and PATCH***************
PUT is used to replace the whole data with the new one whereas PATCH is used to replace a part of the data.


***************CAN WE USE GET CALL TO CREATE A RECORD***************
PUT or POST method is used create a resource. GET is only used to request the resources.


***************AUTHENTICATION AND AUTHORIZATION***************
Authentication is the process of verifying who a user is, and authorization is the process of verifying what they have access to.


***************AUTHORIZATION***************

BASIC AUTH:
The sender inserts a username: password into the request header using this way. 
Base64 is an encoding technique that turns the login and password into a set of 64 characters to ensure secure transmission.

Bearer Auth:
The bearer token is a cryptic string, usually generated by the server in response to a login request. 
The client must send this token in the Authorization header to get the response.

***************STATUS CODES***************
Difference between 401 and 403
We will get 401 when the client provides no credentials or invalid credentials.(Unauthorised)
We will get 403 when the  client has valid credentials and restricted access.(Forbidden).

500 server side errors
400 Client side errors

2** codes
200 OK
201 Created
202 Accepted
203 Non-Authoritative Information
204 No Content
205 Reset Content

3xx Redirection
4xx Client Error
400 Bad Request
401 Unauthorized
402 Payment Required
403 Forbidden
404 Not Found

5xx Server Error
500 Internal Server Error
501 Not Implemented
502 Bad Gateway
503 Service Unavailable
504 Gateway Timeout


-----------------------------------------------------------------------------------REST API----------------------------------------------------------------------------------

-->Representational state transfer (REST)  API.
-->Curly braces is object and square braces is array

*********************************************REST ASSURED*********************************************
It enables us to test the API,by fetching data from almost every part of the API.
Using this we can also assert the API validation.


*********************************************DEPENDENCIES*********************************************
JAVA 8:
<dependency>
<groupId>io.rest-assured</groupId>
<artifactId>json-path</artifactId>
<version>4.2.0</version>
<scope>test</scope>
</dependency>


<dependency>
<groupId>io.rest-assured</groupId>
<artifactId>xml-path</artifactId>
<version>4.2.0</version>
<scope>test</scope>
</dependency>


<dependency>
<groupId>io.rest-assured</groupId>
<artifactId>json-schema-validator</artifactId>
<version>4.2.0</version>
<scope>test</scope>
</dependency>

JAVA 9 USERS:
<dependency>
<groupId>io.rest-assured</groupId>
<artifactId>rest-assured-all</artifactId>
<version>4.2.0</version>
<scope>test</scope>
</dependency>


***Incase of errors import these libraries***
import io.restassured.RestAssured.*;
import io.restassured.matcher.RestAssuredMatchers.*;
import org.hamcrest.Matchers.*;

SYNTAX:
Given(). 
        param("x", "y"). 
        header("z", "w").
when().
Method().
Then(). 
        statusCode(XXX).
        body("x, ”y", equalTo("z"));





Code	Explanation
Given()	‘Given’ keyword, lets you set a background, here, you pass the request headers, query and path param, body, cookies. This is optional if these items are not needed in the request
When()	‘when’ keyword marks the premise of your scenario. For example, ‘when’ you get/post/put something, do something else.(LIKE CONDITION)
Method()	Substitute this with any of the CRUD operations(get/post/put/delete)
Then()	Your assert and matcher conditions go here
log().all() It logs everything that request returns to you
log().body() It logs only the body of the response


BASIC URL TO  GET REQUEST WITHOUT ANY PARAMETERS:
  given().when().get("http://demo.guru99.com/V4/sinkministatement.php?CUSTOMER_ID=68195&PASSWORD=1234!&Account_No=1").then().log()
  .all();


ABOVE URL IS SPLITTED WITH QUERY PARAMETERS:(KEY VALUE PAIRS AFTER QUESTION MARK IS CALLED QUERY PARAMETER)
given().queryParam("CUSTOMER_ID","68195")
           .queryParam("PASSWORD","1234!")
           .queryParam("Account_No","1")
           .when().get("http://demo.guru99.com/V4/sinkministatement.php").then().log()
           .body();
 
ASSERT:
given().when().get(url).then().assertThat().statusCode(200);

given().get(url).then().assertThat().statusCode(HttpStatus.OK.value())sssssssssss.body("id", equalTo(testMovie.getId()))
      .body("name", equalTo(testMovie.getName()))
      .body("synopsis", notNullValue());


TO GET RESPONSE DATA:
RestAssured.get("https://reqres.in/api/users/2").path("data.email").toString()

if there is multiple key below will work
RestAssured.get("https://reqres.in/api/users?page=2").path("data.email[5]").toString()

TO GET RESPONSE CODE:
RestAssured.get("http://demo.guru99.com/V4/sinkministatement.php?CUSTOMER_ID=68195&PASSWORD=1234!&Account_No=1").getStatusCode()

-->given is not required since we dont have any precondition provided we use all the parameter in the url fully

-->Key value pair after the question mark in url is called query parameter.

So above can be changed to
RestAssured.given().queryParam("CUSTOMER_ID", "68195").queryParam("PASSWORD", "1234").queryParam("Account_No", "1").get("http://demo.guru99.com/V4/sinkministatement.php")
				.getStatusCode()

TO GET RESPONSE BODY:
RestAssured.get("http://demo.guru99.com/V4/sinkministatement.php?CUSTOMER_ID=68195&PASSWORD=1234!&Account_No=1").then().log().body()


TO GET RESPONSE TIME:
RestAssured.get("http://demo.guru99.com/V4/sinkministatement.php?CUSTOMER_ID=68195&PASSWORD=1234!&Account_No=1").timeIn(TimeUnit.SECONDS)

TO GET CONTENT TYPE OF API:
RestAssured.get("https://reqres.in/api/users?page=2").getContentType()


HEADER:
Headers in an HTTP request or response is the additional information that is transferred to the user or the server.

RestAssured.get("http://demo.guru99.com/V4/sinkministatement.php?CUSTOMER_ID=68195&PASSWORD=1234!&Account_No=1").then().extract().headers()


SAMPLE HEADER:
Date=Sat, 04 Feb 2023 16:25:07 GMT
Server=Apache
Upgrade=h2,h2c
Connection=Upgrade, Keep-Alive
Cache-Control=max-age=600
Expires=Sat, 04 Feb 2023 16:35:07 GMT
Vary=Accept-Encoding,User-Agent
Content-Encoding=gzip
Content-Length=164
Keep-Alive=timeout=2, max=500
Content-Type=text/html; charset=UTF-8